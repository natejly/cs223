#!/usr/bin/perl -w

use strict;
use POSIX;    # for floor
use Cwd 'realpath';
use File::Spec;
use File::Basename;

# Modified for Fall 2023 by Alan Weide
# Original copied from /c/cs223/hw4/Tests/test.Blotto

my $debug = 0;

my $CLASS  = "223";
my $HWK    = "4";
my $NAME   = "Blotto";        # Name of program
my $UNIT   = "GmapUnit";      # Name of program
my $TEST   = "tIJ";           # Name of test file (IJ is replaced by number)
my $ANSWER = "tIJ.out";       # Name of answer file (IJ is replaced by number)
my $DATE   = "10/22/2023";    # Date script written
my $LANG   = "C";             # Language (C, Perl, ...)

# Blank-separated list of illegal files; wildcards permitted
my $hwkFiles = "*.o";

my $PROGRAM = "./$NAME";      # Name of executable

my %WHICH;                    # Allow individual tests on command line
@WHICH{@ARGV}++
  if (@ARGV);

$SIG{HUP} = $SIG{INT} = $SIG{QUIT} = $SIG{TERM} =
  \&cleanup;
my @UNLINK;                           # Files to delete on signal
my $TMPDIR = "/tmp/TEST.$NAME.$$";    # Name of temporary directory

sub cleanup {
    unlink(@UNLINK);                  # Delete files
    if ( -e $TMPDIR ) {               # Delete temporary directory
        system("/bin/chmod -R +w $TMPDIR");
        system("/bin/rm -rf $TMPDIR");
    }
    exit;
}

my $WallClock = 0;

$0 =~ s{^.*/}{};    # Extract test type
my $TYPE = ( $0 =~ m{^test\.} ) ? "Public" : "Final";
print "\n$TYPE test script for $NAME ($DATE)\n\n";

&limitCpuTime( 40, 80 );    # Limit CPU-time per process
&limitWallClock(160);       # Limit wall-clock per process
&limitFileSize(100000);     # Limit size of files created

# &limitHeapSize (1000000);                    # Limit size of heap
&limitProcesses(1000);      # Limit #processes

# my $where   = "/c/cs$CLASS/hw$HWK/Tests";    # Where to find test files (Zoo)
my $where = realpath( File::Spec->rel2abs( dirname(__FILE__) ) );
$ENV{WHERE} = $where;

# Where to find test files

# my $bin     = "/c/cs$CLASS/bin";             # Where to find special utilities (Zoo)
my $bin = "$where/bin";
$ENV{BIN} = $bin;

my $run = "$bin/run";    # Utility to run program

my $diff = "/usr/bin/diff";    # Utility to compare files

my $head = "$bin/Head";        # Utility to output files

&makeProgram
  unless ( $LANG eq "Perl" );

$|++;
print "\nEach test is either passed or failed; there is no partial credit.\n\n"
  . "To execute the test labelled IJ, type one of the following commands\n"
  . "depending on whether the file $where/$TEST is executable or not:\n"
  . "     $where/$TEST\n"
  . "     $PROGRAM < $where/$TEST\n"
  . "The answer expected is in $where/$ANSWER.\n\n";

my @scores     = ();
my $checkpoint = -1;
my $total      = 0;
my $subtotal   = 0;
my $testCount  = 0;
my @SOURCE     = ('');
my @LINK       = ();
&sectionHeader('Gmap Unit Tests');
$subtotal = 0;
@SOURCE   = ();
@LINK     = ();
$subtotal = &runTest( '001', 'gmap_get' );
$subtotal += &runTest( '002', 'gmap_size' );
$subtotal += &runTest( '003', 'gmap_contains_key' );
$subtotal += &runTest( '004', 'gmap_put copies key' );
$subtotal += &runTest( '005', 'gmap_put does not copy value' );
$subtotal += &runTest( '006', 'gmap_put multiple times same key' );
$subtotal += &runTest( '007', 'Large map' );
$subtotal += &runTest( '008', 'Large map with bad hash function' );
$subtotal += &runTest( '009', 'gmap_for_each' );
$subtotal += &runTest( '010', 'gmap_keys' );
$subtotal += &runTest( '011', 'gmap with alternative key and value types' );

# $subtotal = $subtotal * 35 / 11;
$total += floor($subtotal);
&sectionResults( 'Gmap Unit Tests', $subtotal, 11, $checkpoint );
$testCount += 11;

&sectionHeader('Gmap Unit Tests with Valgrind');
$subtotal = 0;
@SOURCE   = ();
@LINK     = ();
$subtotal = &runTest( '012', 'gmap_get' );
$subtotal += &runTest( '013', 'gmap_put copies key' );
$subtotal += &runTest( '014', 'gmap_put does not copy value' );
$subtotal += &runTest( '015', 'gmap_put multiple times same key' );
$subtotal += &runTest( '016', 'Large map' );
$subtotal += &runTest( '017', 'gmap_for_each' );
$subtotal += &runTest( '018', 'gmap_keys' );
$subtotal += &runTest( '019', 'gmap with alternative key and value types' );

# $subtotal = $subtotal * 15 / 8;
$total += floor($subtotal);
&sectionResults( 'Gmap Unit Tests with Valgrind', $subtotal, 8, $checkpoint );
$testCount += 8;

&sectionHeader('Gmap Worst-case Running Times');
$subtotal = 0;
@SOURCE   = ();
@LINK     = ();
$subtotal = &runTest( '020', 'gmap_for_each' );
$subtotal += &runTest( '021', 'gmap_put' );
$subtotal += &runTest( '022', 'gmap_get' );

# @scores = (0,2,5,10);
# $subtotal = (int($subtotal) < scalar @scores) ? $scores[int($subtotal)] : $scores[(scalar @scores) - 1];
$total += floor($subtotal);
&sectionResults( 'Gmap Worst-case Running Times', $subtotal, 3, $checkpoint );
$testCount += 3;

&sectionHeader(
    'Showstopper Circumvention Tests (no credit for gmap if any fail)');
$subtotal = 0;
@SOURCE   = ();
@LINK     = ();
$subtotal = &runTest( '023', 'Initial size is reasonable' );
$subtotal += &runTest( '024', 'Uses supplied hash function' );
$subtotal += &runTest( '025', 'gmap_put expected time' );
$subtotal += &runTest( '026', 'gmap_get expected time' );
$subtotal = ( $subtotal < 4 ? -$total : 4 );
$total += floor($subtotal);
&sectionResults(
    'Showstopper Circumvention Tests (no credit for gmap if any fail)',
    $subtotal, 4, $checkpoint );
$testCount += 4;

&sectionHeader('Competitions');
$subtotal = 0;
@SOURCE   = ();
@LINK     = ();
$subtotal = &runTest( '027', '2 Battlefields, 2 Entries' );
$subtotal += &runTest( '028', '2 Battlefields, 3 Entries' );
$subtotal += &runTest( '029', '4 Battlefields, 3 Entries' );
$subtotal += &runTest( '030', '4 Battlefields, 2 Entries, Tied Matchup' );
$subtotal += &runTest( '031', '4 Battlefields, 4 entries, not Round-Robin' );

# $subtotal = $subtotal * 40 / 5;
$total += floor($subtotal);
&sectionResults( 'Competitions', $subtotal, 5, $checkpoint );
$testCount += 5;

&sectionHeader('Additional Unit Tests');
$subtotal = 0;
@SOURCE   = ();
@LINK     = ();
$subtotal = &runTest( '032', 'gmap_remove' );
$subtotal += &runTest( '033', 'gmap_remove nonexistent key' );
$subtotal += &runTest( '034', 'gmap_remove after collisions' );
$subtotal += &runTest( '035', 'gmap_keys with intervening embiggen' );
$checkpoint = $total;

$total += floor($subtotal);
&sectionResults( 'Additional Unit Tests', $subtotal, 4, $checkpoint );
$testCount += 4;

&sectionHeader('Additional Unit Tests with Valgrind');
$subtotal = 0;
@SOURCE   = ();
@LINK     = ();
$subtotal = &runTest( '036', 'gmap_remove' );
$subtotal += &runTest( '037', 'gmap_remove nonexistent key' );
$subtotal += &runTest( '038', 'gmap_remove after collisions' );
$subtotal += &runTest( '039', 'gmap_keys with intervening embiggen' );
$total    += floor($subtotal);
&sectionResults( 'Additional Unit Tests with Valgrind',
    $subtotal, 4, $checkpoint );
$testCount += 4;

&sectionHeader('Additional Competitions');
$subtotal = 0;
@SOURCE   = ();
@LINK     = ();
$subtotal = &runTest( '040', '4 Battlefields, 3 Entries, Different Scoring' );
$subtotal += &runTest( '041', '4 Battlefields, 3 Entries, Double-digit Units' );
$subtotal += &runTest( '042', '5 Battlefields' );
$subtotal += &runTest( '043', 'Valgrind' );
$total    += floor($subtotal);
&sectionResults( 'Additional Competitions', $subtotal, 4, $checkpoint );
$testCount += 4;

&sectionHeader('Invalid input');
$subtotal = 0;
@SOURCE   = ();
@LINK     = ();
$subtotal = &runTest( '044', 'Long id in entries' );
$subtotal += &runTest( '045', 'Non-numeric unit count in entries' );
$subtotal += &runTest( '046', 'Inconsistent total units' );
$subtotal += &runTest( '047', 'Wrong number of battlefields' );
$subtotal += &runTest( '048', 'Matchup with invalid id' );
$subtotal += &runTest( '049', 'Missing entry id in matchup' );
$total    += floor($subtotal);
&sectionResults( 'Invalid input', $subtotal, 6, $checkpoint );
$testCount += 6;

&sectionHeader('Invalid input with Valgrind');
$subtotal = 0;
@SOURCE   = ();
@LINK     = ();
$subtotal = &runTest( '050', 'Long id in entries' );
$subtotal += &runTest( '051', 'Non-numeric unit count in entries' );
$subtotal += &runTest( '052', 'Inconsistent total units' );
$subtotal += &runTest( '053', 'Wrong number of battlefields' );
$subtotal += &runTest( '054', 'Matchup with invalid id' );
$subtotal += &runTest( '055', 'Missing entry id in matchup' );
$total    += floor($subtotal);
&sectionResults( 'Invalid input with Valgrind', $subtotal, 6, $checkpoint );
$testCount += 6;

# &header ('Deductions for Violating Specification (0 => no violation)');
#$total += &deduction (localCopies($hwkFiles), "Local copy of $hwkFiles");

print "\nEnd of Public Script\n";

if ( -f "deductions.txt" ) {
    print("\n");
    system("cat deductions.txt");
    print("\n");
    $subtotal = `cut -d' ' -f 1 deductions.txt | awk '{s+=\$1} END {print s}'`;
    $total    = $total + $subtotal;
}

if ( 0 and $checkpoint >= 0 ) {
    printf( "\n Total score at first checkpoint: %3d\n", $checkpoint );
    printf( "%3d of %3d Additional tests passed for $NAME\n",
        $total, $testCount );
}
else {
    printf( "\n%3d of %3d Total tests passed for $NAME\n", $total, $testCount );
}

#&header ("Non-credit Tests");

# &sectionHeader ("Possible Deductions (assessed later as appropriate)");
# &possibleDeduction ( -100, "Hard-coding to defeat autograder");
# &possibleDeduction ( -10, "Deficient style (comments, identifiers, formatting, ...)");
# &possibleDeduction ( -5, "Does not make");
# &possibleDeduction ( -5, "Makefile missing");
# &possibleDeduction ( -5, "Makefile incorrect");
# &possibleDeduction ( -1, "Log file incorrectly named");
# &possibleDeduction ( -1, "Log file lacks estimated time");
# &possibleDeduction ( -1, "Log file lacks total time");
# &possibleDeduction ( -1, "Log file lacks statement of major difficulties");
# #&possibleDeduction ( -1, "Compilation errors using -Wall -std=c99 -pedantic");

# if ($TYPE eq "Final") {
#    print "\n";
#    system ("rm -f $PROGRAM *.o")                # Cleanup if final script
#       unless ($LANG eq "Perl");
# }

# if ($TYPE eq "Public") {                        # Reminder to students
#    system ("/c/cs$CLASS/bin/checklog -noprint");
#    system ("/c/cs$CLASS/bin/checkmake -noprint")
#       unless ($LANG eq "Perl");
# }

exit $total;

##########
# Print section header for tests
sub sectionHeader {
    printf( "\n%11s%s\n", "", @_ );
}

##########
# Print section results for tests
sub sectionResults {
    my ( $name, $subtotal, $count, $checkpoint ) = @_;
    if ( 1 or $checkpoint >= 0 ) {
        printf( "\n%11s%s: %d of %d tests passed\n",
            "", $name, $subtotal, $count );
    }
    else {
        printf( "\n%11s%s: %d points\n", "", $name, $subtotal );
    }
}

##########
# Print header for tests
sub header {
    printf( "\n%15s%s\n", "", @_ );
}

##########
# Print addition
sub addition {
    my ( $points, $title ) = @_;
    printf( "%3d point       $title\n", $points );
    return $points;
}

##########
# Print deduction
sub deduction {
    my ( $points, $title ) = @_;
    printf( "%3d point       $title\n", $points );
    return $points;
}

##########
# Print possible deduction
sub possibleDeduction {
    printf( "%18d %s\n", @_ );
}

##########
# Skip a test
sub skipTest {
    my ( $test, $title ) = @_;
    printf( "NOTRUN  %3s. %s\n", $test, $title );
}

##########
# Forced fail a test
sub failTest {
    return 0;
}

##########
# Run a test
sub runTest {
    my ( $test, $title, $command, $conds ) = @_;

    # printf("%s\n", $where);
    # printf("%s\n", $bin);

    my $results = "/tmp/$NAME.$$";    # Results of test
    my $diffs   = "/tmp/diff.$$";     # Expected results vs. results
    my $errors  = "/tmp/errs.$$";     # Error messages generated
    my ( $status, @conds, $points );

    my $testFile = "$where/$TEST";     # Name of test file
    $testFile =~ s{IJ}{$test};
    my $answers = "$where/$ANSWER";    # Name of answer file
    $answers =~ s{IJ}{$test};

    return 0                           # Either execute all tests or
      unless (
        keys %WHICH == 0               #   only those on command line
        || exists $WHICH{$test}
      );

    ( -r $testFile )
      || die("$0: missing test file $testFile\n");

    push @UNLINK, $results, $errors, $diffs;    # Files to delete on signal

    if ( defined $command ) {
        system("$command | head -n 1");
        $points = `$command | /usr/bin/tail -n 1`;
        printf( "%3d point  %3s. %s\n", $points, $test, $title );
        return floor($points);
    }

    if ( -x $testFile ) {
        $status = execute( $testFile, undef, $results, $errors );
    }
    elsif ( $LANG eq "Perl" ) {
        $status = execute( $PROGRAM, $testFile, $results, $errors );
    }
    else {
        $status = execute( "$run $PROGRAM", $testFile, $results, $errors );
    }

    if ( defined $conds && $conds eq "Graceful" ) {
        @conds = ( 'NORMAL', $status );
    }
    else {
        ( -r $answers )
          || die("$0: missing answer file $answers\n");
        system("$diff $answers $results  > $diffs  2>> $errors");

        system("$head $diffs");
        @conds = ( 'NULL', $diffs );

        # this displays and tests stderr too
        #system ("$head $errors $diffs");
        #@conds = ('NULL', $errors, 'NULL', $diffs);
    }

    if ( defined $conds && $conds eq "Error message" ) {
        @conds = ( 'NONNULL', $errors, 'NULL', $diffs );
    }

    if ( defined $conds && $conds =~ m{^Deduct=(\d+)$} ) {
        @conds = ( 'DEDUCT', $1, @conds );
    }

    $points = &correct(@conds);
    if ( $points == 1 ) {
        printf("PASSED");
    }
    else {
        printf("FAILED");
    }
    printf( "  %3s. %s\n", $test, $title );
    system("rm -f $results $errors $diffs");
    pop @UNLINK;
    pop @UNLINK;
    pop @UNLINK;    # Remove added files

    return $points;
}

##########
#  correct ({[UNOP FILE] | ['NORMAL' STATUS]}*)
#
#  Return 1 if the conjunction of the specified tests is true, else 0, where:
#
#    UNOP FILE (where UNOP is either 'NULL' or 'NONNULL'):
#      Is the size of the file FILE as specified?
#
#    'NORMAL' STATUS:
#      Did the process terminate normally?
#
#    'DEDUCT' POINTS:
#      Change the point values to 0 for success, -POINTS for failure
#
sub correct {
    my $op;
    my ( $success, $failure ) = ( 1, 0 );

    while ( $op = shift ) {
        if ( $op eq 'NULL' ) {
            my $arg = shift;
            print STDERR "$op $arg\n" if $debug;
            if ( -s $arg ) {
                if ( $arg =~ m{/diff\.} ) {
                    print "Error: STDOUT differs from expected\n";
                }
                elsif ( $arg =~ m{/errs\.} ) {
                    print "Error: STDERR should be empty\n";
                }
                else {
                    print "Error: File $arg is nonempty\n";
                }
                return $failure;
            }

        }
        elsif ( $op eq 'NONNULL' ) {
            my $arg = shift;
            print STDERR "$op $arg\n" if $debug;
            if ( !-s $arg ) {
                if ( $arg =~ m{/errs\.} ) {
                    print "Error: STDERR should be nonempty\n";
                }
                else {
                    print "Error: File $arg is empty\n";
                }
                return $failure;
            }

        }
        elsif ( $op eq 'NORMAL' ) {
            my $arg = 127 & shift;
            print STDERR "$op $arg\n" if $debug;
            if ( $arg != 0 ) {
                print "Error: Status = $arg is nonzero\n";
                return $failure;
            }

        }
        elsif ( $op eq 'DEDUCT' ) {
            my $arg = shift;
            ( $success, $failure ) = ( 0, -$arg );
        }
    }
    return $success;
}

##########
# Create program to test
sub makeProgram {

    system("rm -f $PROGRAM");    # Delete program & object files
    system("rm -f *.o");

#     if ($TYPE eq "Final");
#     system(
# "if compgen -G '/c/cs${CLASS}/hw${HWK}/Required/*' > /dev/null; then cp /c/cs${CLASS}/hw${HWK}/Required/* . ; fi"
#     );
#     system(
# "if compgen -G '/c/cs${CLASS}/hw${HWK}/Optional/*' > /dev/null; then cp -n /c/cs${CLASS}/hw${HWK}/Optional/* . ; fi"
#     );

    ( -f "Makefile" || -f "makefile" )    # Give warning if no Makefile
      || warn("$0: no makefile found\n");

    system("$bin/makewarn -B $NAME $UNIT");
    ( $? == 0 )
      || die("$0: cannot compile $NAME and/or $UNIT\n");

    ( -e $PROGRAM ) || die("$0: could not build executable $NAME\n");
}

##########
# Limit CPU-time, wall-clock-time, file-size, and/or heap-size
use BSD::Resource;

sub limitCpuTime {    # (time in seconds)
    my ( $soft, $hard ) = @_;
    $hard = $soft
      if ( !defined($hard) );
    setrlimit( RLIMIT_CPU, $soft, $hard );
}

sub limitWallClock {    # (time in seconds)
    my ($wall) = @_;
    $SIG{ALRM} = 'IGNORE';    # Parent ignores alarms
    $WallClock = $wall;
}

sub limitFileSize {    # (size in kilobytes)
    my ($size) = @_;
    $size *= 1024;
    setrlimit( RLIMIT_FSIZE, $size, $size );
}

sub limitHeapSize {    # (size in kilobytes        # Bug: Has no effect
    my ($size) = @_;
    $size *= 1024;
    setrlimit( RLIMIT_VMEM, $size, $size );
}

sub limitProcesses {    # (#processes)             # Bug: Has no effect
    my ($nproc) = @_;
    setrlimit( RLIMIT_NPROC, $nproc, $nproc );
}

##########
# Execute program after redirecting stdin, stdout, & stderr and return status
sub execute {
    my ( $program, $stdin, $stdout, $stderr ) = @_;
    my ( $pid, $status );

    ( defined( $pid = fork ) )    # Create child process
      || die("$0: fork failed\n");

    if ( $pid == 0 ) {            # Child process
        open( STDIN, "<", "$stdin" )    #  Redirect stdin
          if ( defined $stdin );
        open( STDOUT, ">", "$stdout" )    #  Redirect stdout
          if ( defined $stdout );
        open( STDERR, ">", "$stderr" )    #  Redirect stderr
          if ( defined $stderr );
        mkdir($TMPDIR)                    #  Create a temporary directory
          || die("$0: mkdir $TMPDIR failed\n");
        system("/bin/cp * $TMPDIR");      # just copy everything
        system("/bin/cp @LINK $TMPDIR")
          if ( @LINK != 0 );              # and link to specified files
         #system ("/bin/cp $PROGRAM $TMPDIR");      #    With a copy of the program
         #system ("/bin/cp @SOURCE $TMPDIR") if (@SOURCE != 0); # and other required files
        chdir("$TMPDIR")    #    And cd there
          || die("$0: chdir $TMPDIR failed\n");
        ( exec $program)    #  Execute command
          || die("$0: exec failed\n");
    }

    alarm($WallClock);      # Set an alarm to interrupt in
    $SIG{ALRM} =            # ... $WallClock seconds
      sub {
        kill "TERM", $pid;
        if ( defined $stderr ) {
            open( my $error_fh, '>>', $stderr )
              or die("$0: Cannot open $stderr for appending: $!");
            print $error_fh "Time limit exceeded\n";
            close $error_fh;
        }
        else {
            print STDERR "Time limit exceeded\n";
        }
      };
    waitpid( $pid, 0 );    # Wait for child to die,
    alarm(0);              # ... cancel alarm,
    $status = $?;

    system("/bin/chmod -R +w $TMPDIR");    # Delete temporary directory
    system("/bin/rm -rf $TMPDIR");
    ( !-e $TMPDIR )
      || die("$0: cannot delete $TMPDIR\n");

    return $status;                        # ... and return exit status
}

##########
# $FILES is a blank-separated list of filenames which may include wildcards.
# If any of these files exist in the current working directory, print their
# names and return -1; else return 0.
sub localCopies {    # ($files)
    my ($files) = @_;
    open( my $ls_fh, '-|', "ls -l $files 2>/dev/null" )
      || die("$0: cannot ls -l $files\n");
    my @ls = <LS>;
    close(LS);
    print @ls;
    return ( @ls > 0 ) ? -1 : 0;
}
